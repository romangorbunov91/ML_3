import streamlit as st
import cv2
import numpy as np
from PIL import Image
from ultralytics import YOLO
from ultralytics.utils.plotting import Colors

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π –ø–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤
custom_palette = {
    0: (0, 0, 0),  # —á–µ—Ä–Ω—ã–π
    1: (255, 0, 0),  # —Å–∏–Ω–∏–π
    2: (42, 42, 165),  # –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π
    3: (55, 175, 212),  # –∑–æ–ª–æ—Ç–æ–π
    4: (0, 255, 0),  # –∑–µ–ª–µ–Ω—ã–π
    5: (128, 128, 128),  # —Å–µ—Ä—ã–π
    6: (0, 165, 255),  # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
    7: (0, 0, 255),  # –∫—Ä–∞—Å–Ω—ã–π
    8: (192, 192, 192),  # —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π
    9: (230, 0, 255),  # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    10: (255, 255, 255),  # –±–µ–ª—ã–π
    11: (0, 255, 255)  # –∂–µ–ª—Ç—ã–π
}


@st.cache_resource
def load_model():
    colors = Colors()
    colors.palette = custom_palette
    model = YOLO('D:/git/ITMO/ML/ML_3/train_yolov8n/weights/best.pt')
    
    return model

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å YOLOv8")
st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
uploaded_file = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...",
    type=["jpg", "jpeg", "png"],
    help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã JPG, JPEG, PNG. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 200MB"
)

if uploaded_file is not None:
    with st.spinner('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...'):
        image = Image.open(uploaded_file)
        image_np = np.array(image)

        if image_np.shape[-1] == 4:
            image_np = cv2.cvtColor(image_np, cv2.COLOR_RGBA2BGR)
        else:
            image_np = cv2.cvtColor(image_np, cv2.COLOR_RGB2BGR)

        model = load_model()
        results = model(image_np)
        im_array = results[0].plot(line_width=2)
        result_image = cv2.cvtColor(im_array, cv2.COLOR_BGR2RGB)

        boxes = results[0].boxes
        class_ids = boxes.cls.int().cpu().tolist()
        confidences = boxes.conf.cpu().tolist()
        class_names = [model.names[id] for id in class_ids]

        results_df = {
            "–ö–ª–∞—Å—Å": class_names,
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": [f"{conf:.2f}" for conf in confidences]
        }

    st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    col1, col2 = st.columns([2, 1])

    with col1:
        st.image(
            result_image,
            caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤",
            use_container_width=True
        )

    with col2:
        st.subheader("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã")
        for name, conf in zip(results_df["–ö–ª–∞—Å—Å"], results_df["–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]):
            st.markdown(f"- **{name.capitalize()}**: {conf}")

        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            data=cv2.imencode('.jpg', im_array)[1].tobytes(),
            file_name="result_detection.jpg",
            mime="image/jpeg",
            use_container_width=True
        )

else:
    st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, JPEG –∏–ª–∏ PNG")